/**********
* myShell2*
***********/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <errno.h>
#include <sys/types.h>
#include <sys/wait.h>

#define error(a) {perror(a); exit(1);};
#define MAXLINE 200
#define MAXARGS 20


/**
* Readings coomands from the standard input 
*/
int read_args(int* argcp, char* args[], int max, int* eofp)
{
   static char cmd[MAXLINE];
   char* cmdp;
   int ret,i;

   *argcp = 0;
   *eofp = 0;
   i=0;
   while ((ret=read(0,cmd+i,1)) == 1) {
      if (cmd[i]=='\n') break;  // correct line
      i++;
      if (i>=MAXLINE) {
         ret=-2;        // line too long
         break;
      }
   }
   switch (ret)
   {
     case 1 : cmd[i+1]='\0';    // correct reading 
              break;
     case 0 : *eofp = 1;        // end of file
              return 0;
              break;
     case -1 : *argcp = -1;     // reading failure
              fprintf(stderr,"Reading failure \n");
              return 0;
              break;
     case -2 : *argcp = -1;     // line too long
              fprintf(stderr,"Line too long -- removed command\n");
              return 0;
              break;
   }
   // Analyzing the line
   cmdp= cmd;
   for (i=0; i<max; i++) {  /* to show every argument */
      if ((args[i]= strtok(cmdp, " \t\n")) == (char*)NULL) break;
      cmdp= NULL;
   }
   if (i >= max) {
      fprintf(stderr,"Too many arguments -- removed command\n");
      return 0;
   }
   *argcp= i;
   return 1;
}

/**
* Function to execute a program. In this case, the controller
* program, which crates two processes (time and program) and
* kills the one that has finished last 
*/
int execute(int argc, char *argv[])
{
	int id = fork();
 	if (id < 0) { // fork failed; exit
 		error("fork()");
 		
 	} else if (id == 0) { // child (new process)

 		char *myargs[argc+1];

  		myargs[0] = strdup("./controller");
  		myargs[argc] = NULL;

  		for (int i = 1; i < argc; i++){myargs[i] = strdup(argv[i]);}

  		if( execvp(myargs[0], myargs) == -1 ) {error("execvp()");}
        		 		
 	} else { // parent goes down this path (main)
 		if ( ';' == argv[0][0] ) waitpid(id, NULL, 0);
 	}
}

//

/**
* Main function
*/
int main (){
  char * Prompt = "myShell2>";
  int argc, pid, eof = 0;
  char *args[MAXARGS];

	while (1) {
      	write(0,Prompt, strlen(Prompt));
      	if (read_args(&argc, args, MAXARGS, &eof) && argc > 0) {
      		
      		if( strcmp("exit", args[0]) == 0 ) exit(1);

      		execute(argc, args);    		
        }
  		if (eof) exit(0);
	}
}
